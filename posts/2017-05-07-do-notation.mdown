---
post-id: dialogues-on-do-notation
title: Dialogues on <code>do</code> notation
twitter-title: Dialogues on do notation
description: Dialogues on Haskell&#8217;s <code>do</code> notation, <code>for</code> loops, and related matters. These took place over several months, and we learned from each other in the process.
twitter-description: Dialogues on Haskell&#8217;s 'do' notation, 'for' loops, and related matters. These took place over several months, and we learned from each other in the process.
---

# Dialogues on `do` notation

These dialogue snippets are from a series of conversations occurring over months, but we&#8217;ve edited them to try to present a mostly coherent presentation of what we think about `do` notation and why.

<div class="hr">●●●</div>

The first time we realized that we have a disagreement came in a conversation about Applicative. This was right before I was going to teach a class about Applicative and was trying to figure out what syntax people unfamiliar with Applicative find easiest to read:

<div class="dialogue">

<div class="line">
<div class="name">Julie:</div> I know every time I unthinkingly put something like
```haskell
(+) <$> Just 4 <*> Just 5
```
in front of a student who isn&#8217;t ready for it, they freak out.
</div>

<div class="line">
<div class="name">Chris:</div> I just recognize the pattern and mentally translate it into `liftA2`.<a name="footnote-mark-1" href="#footnote-1"><sup>1</sup></a>
</div>

<div class="line">
<div class="name">Julie:</div> Huh, I always forget `liftA2` exists. And I think it obscures, although not as bad as `do` syntax. So I think the way that will be the most helpful is to present `(Just (+ 4)) <*> Just 5`  first, then the version using `pure`, then the infix-only version.
</div>

<div class="line">
<div class="name">Chris:</div> I think there&#8217;s a contrast between learning-Haskell and real-world-Haskell here.
</div>

<div class="line">
<div class="name">Julie:</div> There often is, but I want to know specifically what you mean.
</div>

<div class="line">
<div class="name">Chris:</div> When I&#8217;m writing software, I kinda *want* to &ldquo;obscure&rdquo; in that way with `do` notation. The lifting and the applying, they are a distraction from the higher-level idea I am trying to communicate. I know that thinking this way is often a trap, a seductive mistake. So I don&#8217;t know how to justify why I think it&#8217;s right in this case.
</div>

<div class="line">
<div class="name">Julie:</div> You think directly lifting/applying is more of a distraction than `do` syntax is? This is curiosity, not argumentation, although I find `do` syntax distracting.
</div>

<div class="line">
<div class="name">Chris:</div> Yeah, but I don&#8217;t know why.
</div>

<div class="line">
<div class="name">Julie:</div> I find it distracting because there is often more I have to read (or I feel like there is) before I know what&#8217;s happening. There&#8217;s this extra step of *renaming* stuff. That is not always the case &mdash; sometimes `do` syntax is ok, depending on what&#8217;s inside the block.
</div>

</div>

<div class="hr">●●●</div>

This [series of tweets](https://twitter.com/chris__martin/status/854480397173800960) led to another conversation:

<div class="dialogue">

<div class="line">
<div class="name">Julie:</div> Is that the book parser you&#8217;re writing all in `do` notation?
</div>

<div class="line">
<div class="name">Chris:</div> Yeah.
</div>

<div class="line">
<div class="name">Julie:</div> Why? I don&#8217;t get it. You sound like it&#8217;s *obviously* better. It&#8217;s frustrating for me when people act like like something is obviously better in some way, but I can&#8217;t see why. Please tell me what I&#8217;m missing.
</div>

<div class="line">
<div class="name">Chris:</div> Hmm. I don&#8217;t think I know why it&#8217;s more clear to me. For small expressions I don&#8217;t think it makes much difference.

I guess what I like is how it lets you only specify the structure of the thing you&#8217;re parsing first, and then how to assemble the values, separately, on the last line, rather than having to think about both of those things at once.
</div>

<div class="line">
<div class="name">Julie:</div> I see. Fair enough, at least you have a reason.
</div>

<div class="line">
<div class="name">Chris:</div> Also it eliminates parens. Paren nesting can get excessive in parser expressions. Or perhaps my style could be improved.
</div>

<div class="line">
<div class="name">Julie:</div> I don&#8217;t know. For me `do` notation is *obviously bad*, but I seem to be the only person on Earth who thinks so. Which is OK, I guess. I have my reasons, you have yours. But what&#8217;s obvious to me isn&#8217;t to anyone else I guess, and vice versa.

I&#8217;m snarking a little with the *obviously bad*. It&#8217;s not all bad.

Is this one of those things that is a result of learning Haskell first you think?
</div>

<div class="line">
<div class="name">Chris:</div> That thought had crossed my mind. It&#8217;s like... you seem to think more natively in syntax trees than the typical programmer, whereas &ldquo;linear&rdquo; thinking comes first to me. It&#8217;s a comfort to me when I can think of a computation in sequential steps. A parser that consists of parsing `a`, then `b`, then `c`, then combining the results.
</div>

<div class="line">
<div class="name">Julie:</div> That could be related to linguistics too. But it could be I think like that and so am attracted to generative syntax and Haskell because they make sense to the way I already think. Or it could be that doing a lot of syntax made me think a certain way. Or some reinforcing combination.

I do think more sequentially, or linearly, sometimes. And if that&#8217;s how I&#8217;m thinking of it I sometimes use `do` notation. But then I usually end up trying to refactor it once I &mdash; well, I&#8217;d say &ldquo;once I understand what I&#8217;m really doing.&rdquo; For me that probably means  *understand the underlying shape* of what I&#8217;m doing, i.e. the tree. Part of why I dislike `do` notation is for big things where I want to see some intermediate type information, it&#8217;s a bit harder, though [`ScopedTypeVariables` makes it tractable](http://stackoverflow.com/a/20724216), I suppose.

And it feels to me like it&#8217;s hiding the functors, it&#8217;s hiding the mappings. I get this is not how everyone feels, and I asked you because usually you can explain why you said something, and it helps.
</div>

<div class="line">
<div class="name">Chris:</div> Yeah, I think it&#8217;s hiding the functors. There&#8217;s a sort of &ldquo;magic&rdquo; feeling to it at times.
</div>

<div class="line">
<div class="name">Julie:</div> I want my functors out in the open, Chris.
</div>

</div>

<div class="hr">●●●</div>

A couple days later, as Julie was editing the Parsers chapter of [Haskell book](http://haskellbook.com/), she noticed there is a ton of `do` notation in that chapter. And that led to another conversation:

<div class="dialogue">

<div class="line">
<div class="name">Julie:</div> I just noticed there&#8217;s `do` notation all over the Parsers chapter. I didn&#8217;t have much of an opinion about `do` syntax at the time we wrote it; this is a developing crankiness on my part. Take this for example:

```haskell
parseSection :: Parser Section
parseSection = do
  skipWhitespace
  skipComments
  h <- parseHeader
  skipEOL
  assignments <- some parseAssignment
  return $
    Section h (M.fromList assignments)
```
I think that&#8217;s a good example of something that is easier for most people to read in `do` notation than it otherwise would be.
</div>

<div class="line">
<div class="name">Chris:</div> Yeah. Because it has a lot of &ldquo;skips&rdquo;?
</div>

<div class="line">
<div class="name">Julie:</div> Yeah and not so much *binding* of results to different names, names that you then have to look through the rest of the block to see where they get used.
</div>

</div>

*A little while later:*

<div class="dialogue">

<div class="line">
<div class="name">Julie:</div> Aha!
<blockquote>&ldquo;Functions are in my comfort zone; syntax that hides them takes me out of my comfort zone.&rdquo;</blockquote> &mdash; [Paul Hudak on `do` notation](https://mail.haskell.org/pipermail/haskell-cafe/2007-August/030178.html).
I am in good company with my bad opinions!

On the other hand, I like [this perspective](https://mail.haskell.org/pipermail/haskell-cafe/2007-August/030185.html) as well.
</div>

<div class="line">
<div class="name">Chris:</div> Maybe it&#8217;d have been culturally better if `do` notation had been an extension.
</div>

<div class="line">
<div class="name">Julie:</div> I don&#8217;t know. It&#8217;s probably correct that it&#8217;d have even less wide adoption now without `do` syntax. But, uh, avoid success at all costs, right?
</div>

<div class="line">
<div class="name">Chris:</div> I think thinking of it as an advanced feature might be helpful. I agree it obscures what&#8217;s going on, and when I use it it&#8217;s often in situations where I don&#8217;t want to think about what&#8217;s going on, not at that low level.
</div>

<div class="line">
<div class="name">Julie:</div> Are you suggesting I think at low levels? *devilish grin*. More seriously, yeah, I get that.
</div>

<div class="line">
<div class="name">Chris:</div> Making it an extension would make it clear that you don&#8217;t *need it* for anything which might help.
</div>

<div class="line">
<div class="name">Julie:</div> Yes. I&#8217;m just doing this thing where I&#8217;m surrounded by people who seem to all agree on their love of `do` notation, so I feel like my opinion is actually wrong but I just don&#8217;t know it because I&#8217;m not a real enough programmer. So I&#8217;m seeking validation that it&#8217;s OK to have my opinion. You already have the confidence to have your opinion, but I do not.
</div>

<div class="line">
<div class="name">Chris:</div> My opinions change a lot, though.
</div>

<div class="line">
<div class="name">Julie:</div> It doesn&#8217;t matter, because you have great confidence in them while you hold them! But Paul Hudak is on my team here and he is a very real programmer &mdash; or was, before he died.
</div>

</div>

<div class="hr">●●●</div>

It seems we end up discussing Chris&#8217;s *controversial* tweets a lot. This conversation started from [this series of tweets](https://twitter.com/chris__martin/status/857350890012987392). It turns out that Chris has [a lot of *opinions*](https://twitter.com/search?l=&q=for%20traverse%20from%3Achris__martin&src=typd&lang=en) about `for` and `traverse` and we&#8217;re always ready to argue with each other (amicably):

<div class="dialogue">

<div class="line">
<div class="name">Julie:</div> Ha, I forgot that
```haskell
traverse print [1..10]
```
prints the list of unit values at the end.
</div>

<div class="line">
<div class="name">Chris:</div> Yeah, it really should have been `traverse_`.
</div>

<div class="line">
<div class="name">Julie:</div> Yes, it was a mistake but now I got me a list of units.
</div>

<div class="line">
<div class="name">Chris:</div> I ran it in the REPL, and it looked good enough. I didn&#8217;t notice the result value.
</div>

<div class="line">
<div class="name">Julie:</div> How did you miss the big list of units? Heh.
</div>

<div class="line">
<div class="name">Chris:</div> If I had to do it all over again I&#8217;d
```haskell
for_ [1..10] print
```
</div>

<div class="line">
<div class="name">Julie:</div> I like the `foldMap` one better. I forget we have a `for_` and it scares me.
</div>

<div class="line">
<div class="name">Chris:</div> Yes, `foldMap` is better. Gabriel wins.
</div>

<div class="line">
<div class="name">Julie:</div> I&#8217;ve never seen anyone write Haskell the way you do sometimes. It&#8217;s both frightening and impressive.
</div>

<div class="line">
<div class="name">Chris:</div> Our `shake` config uses `for_` a couple times. And most of the `main` of `haskell-to-tex` is in a `for_`.
</div>

<div class="line">
<div class="name">Julie:</div> Figures. You would do that.
</div>

<div class="line">
<div class="name">Chris:</div> Java-born, `for` loops in my blood.
</div>

<div class="line">
<div class="name">Chris:</div> I think all the manners of traversals is something we can help clear up in the book.
</div>

<div class="line">
<div class="name">Julie:</div> That&#8217;s funny what you said, though, since `for` is `flip traverse`, isn&#8217;t it? That&#8217;s why `traverse` is *clearly* easier. To be honest, things like `for` irritate me for other, completely unrelated reasons as well.
</div>

<div class="line">
<div class="name">Chris:</div> So how would you rewrite this expression?
```haskell
for_ (Map.toList (fileSnippets file)) $ \(name, snippet) -> do
  putStrLn $
    "File " <> name <> " - " <>
    tshow (Foldable.length snippet) <> " paragraph(s)"
  writeFile (outDir </> Text.unpack name) $ fold
    [ "% Generated from "
    , Text.pack (takeFileName inFile)
    , "\n\n"
    , "% Generated by haskell-to-tex-"
    , Text.pack (showVersion version)
    , "\n\n"
    , renderSnippet snippet
    , "\n"
    ]
```
</div>

<div class="line">
<div class="name">Julie:</div> I&#8217;m not saying I would. I&#8217;m sure there are times when it makes sense. But if you don&#8217;t know `for_` exists, then you&#8217;d find a way, right? So, how would you write it if you didn&#8217;t know `for_` existed?
</div>

<div class="line">
<div class="name">Chris:</div> In that case I&#8217;d introduce a named function and reverse the order of the arguments.
</div>

<div class="line">
<div class="name">Julie:</div> Sure, that&#8217;s what I would have done. I do that a lot anyway because it&#8217;s easier for me. It is probably a failure of my brain.
</div>

<div class="line">
<div class="name">Chris:</div> It&#8217;s usually easier.
</div>

<div class="line">
<div class="name">Julie:</div> I do not want to manipulate big things in my head, all at once. I need little things, little parts. It&#8217;s similar to what you said about why you like `do` for your parsers: you can think one step at a time instead of having to consider the whole progression.
</div>

<div class="line">
<div class="name">Chris:</div> `for_` might be a special case, for people like me used to it being a special construct in other languages.
</div>

<div class="line">
<div class="name">Julie:</div> Yeah, that&#8217;s part of my worry about it.
</div>

<div class="line">
<div class="name">Chris:</div> Yeah, that makes sense.
</div>

<div class="line">
<div class="name">Julie:</div> If all my Java and Scala dev students find out about it, they will assume it&#8217;s the same thing they&#8217;re used to and not learn about `traverse`.
</div>

<div class="line">
<div class="name">Chris:</div> I wonder if that&#8217;s part of the root of our difference about `do` notation, too. They&#8217;re things that make it easier to write large expressions.
</div>

<div class="line">
<div class="name">Julie:</div> For sure it is.
</div>

<div class="line">
<div class="name">Chris:</div> When the goal should be: don&#8217;t do that.
</div>

<div class="line">
<div class="name">Julie:</div> Pedagogically, I want people to be able to see how the types work out. I want them to get used to thinking in types before they start relying on things like that hide that information from them. This may not apply to `for_` but it&#8217;s not great with huge `do` blocks. You just end up with a big incomprehensible chunk. Like in Java. I&#8217;ve seen people do that.
</div>

<div class="line">
<div class="name">Chris:</div> Big `do` blocks also lead to situations where you just have no idea what any of the types are

so type annotations help &mdash; at which point, you might as well also give them a name and break them off.
</div>

<div class="line">
<div class="name">Julie:</div> Yes, exactly. I think most of the conflict we have like this is coming essentially from two things: 1. Our backgrounds (you from Javaland, me just not knowing anything about programming except a little bit about Haskell), and 2. I&#8217;m always thinking about the pedagogical ramifications rather than what I want when I write code. Or, heaven forbid, *software*.
</div>

<div class="line">
<div class="name">Chris:</div> Yes, I&#8217;m rewriting the `haskell-to-tex` thing in smaller pieces without `do` or `for_` and it looks nice.
</div>

<div class="line">
<div class="name">Julie:</div> It wasn&#8217;t a criticism of your code. You don&#8217;t have to do this.
</div>

<div class="line">
<div class="name">Chris:</div> The bigger improvement in that code was
I had a bunch of stuff that could be moved out of `IO` functions.
</div>

</div>

<div class="hr">●●●</div>

<div class="dialogue">

<div class="line">
<div class="name">Julie:</div> I&#8217;ve been thinking about starting a FITEME series of blog posts, including one about `do` notation, so i may quote you:

&ldquo;Don&#8217;t focus on connecting Monad and Applicative to `do` notation; that&#8217;s true, but it&#8217;s a distraction.&rdquo;<a name="footnote-mark-2" href="#footnote-2"><sup>2</sup></a>

Hue hue.
</div>

</div>

Bonus:

<div class="dialogue">

<div class="line">
<div class="name">Julie:</div> I am distracted today. I&#8217;ve made fantastic progress at learning some things I really wanted to know. They just aren&#8217;t relevant at all to the actual work i need to get done.
</div>

<div class="line">
<div class="name">Chris:</div> Surely you&#8217;ve noticed this about learning computer things, though: All the irrelevant things end up being part of some picture. It all ends up being useful toward the gestalt computer.
</div>

<div class="line">
<div class="name">Julie:</div> Yessss. You are my distraction enabler.
</div>

</div>

<hr>

<div class="footnotes">
<a name="footnote-1" href="#footnote-mark-1"><sup>1</sup></a>
UPDATE: This is no longer true.

<a name="footnote-2" href="#footnote-mark-2"><sup>2</sup></a>
[Context here](https://twitter.com/chris__martin/status/860629420515741697)
</div>
